// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagement.DataAccess.DbContexts;


#nullable disable

namespace TaskManagement.Migrations
{
    [DbContext(typeof(TaskItemContext))]
    [Migration("20250302053223_TaskInfoContextInitialMigration")]
    partial class TaskInfoContextInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("TaskManagement.Entities.TaskItem", b =>
                {
                    b.Property<int>("TaskItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskItemId = 1,
                            Description = "Description for Task 1",
                            DueDate = new DateTime(2025, 3, 8, 10, 32, 32, 507, DateTimeKind.Local).AddTicks(5223),
                            Priority = 2,
                            Status = 0,
                            Title = "Task 1",
                            UserId = -1
                        },
                        new
                        {
                            TaskItemId = 2,
                            Description = "Description for Task 2",
                            DueDate = new DateTime(2025, 3, 15, 10, 32, 32, 508, DateTimeKind.Local).AddTicks(7773),
                            Priority = 3,
                            Status = 0,
                            Title = "Task 2",
                            UserId = -1
                        });
                });

            modelBuilder.Entity("TaskManagement.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = -1,
                            Email = "Not Assigned",
                            Username = "Not Assigned"
                        });
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskItem", b =>
                {
                    b.HasOne("TaskManagement.Entities.User", "TaskOwner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskOwner");
                });
#pragma warning restore 612, 618
        }
    }
}
